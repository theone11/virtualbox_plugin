<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
<!ENTITY name        "virtualbox">
<!ENTITY author      "Dan Kessler">
<!ENTITY version     "2015.04.21-1">
<!ENTITY pluginURL   "https://raw.githubusercontent.com/theone11/virtualbox_test/master/&name;.plg">
<!ENTITY packageVER  "v1.1">
<!ENTITY packageMD5  "528717003df6da90d78501a5f4bc3cdd">
<!ENTITY packagefile "&name;-package-&packageVER;.tar.gz">
<!ENTITY packageURL  "https://github.com/theone11/virtualbox_test/raw/master/&packagefile;">
<!ENTITY pluginLOC   "/boot/config/plugins/&name;">
<!ENTITY emhttpLOC   "/usr/local/emhttp/plugins/&name;">
]>

<PLUGIN  name="&name;"
         author="&author;"
         version="&version;"
         pluginURL="&pluginURL;"
>

<!--
# Release Version v2015.04.21-1
-->

<CHANGES>
###2015.04.21-1
- Fixed unRAID v5 compatability
###2015.04.21
- Added support for unRAID v6 Plugin Manager and Architecture
- Added support for tgz and txz compiled packages
###0.5.7
- Reduced plugin load time by reducing network accessing when checking online versions
### 0.5.6
- Added MD5 checksum verification for all downloaded packages immediately after download - delete download if MD5 cannot be verified or fails verification
### 0.5.5
- Fixed kernel version number extraction from online package
### 0.5.4
- Changed unRAID compiled VirtualBox version availability and presentation in WEBUI (compatible and latest)
- Changed timeout to 10 seconds (instead of 60)
- Added plugin forum link to WEBUI
- Automatic support of 32/64bit packages depending on OS
### 0.5.3
- Added changelog history
- Enabled changing of Mount and Startup options also when virtualbox is running - They impact only during plugin start
- Only if VirtualBox installed give option to update from local or online versions if exist otherwise download options
- Changed "vboxmanage" to correct case "VBoxManage" and added full path "/opt/Virtualbox/VBoxManage"
- Added to log confirmation that installation of packages completed correctly.
- If "VirtualBox LOCAL version different than INSTALLED version" then function changed to "update" instead of "install"
- Duplicated all "logger" output also to regular output "echo"
- Added --timeout=10 on all wget commands
- Minor UI Change
### 0.5.2    - Added Latest Release version available from VirtualBox.org (not necessarily existing for unRAID yet)
- Local versions extraction
- Cosmetic changes
### 0.5.1    - Fixed bottom of page is sometimes not visible due to unRAID progressframe
### 0.5      - Added option to download GuestAdditions Package
- Added option to change /boot/custom/vbox to different location including moving of files - New parameter in configuration
- Changed configuration update code
- When upgrading from older version plugins the following line should be added to cfg file before upgading the plugin:
  VBOX_SYMLINK_LOCATION="/boot/custom/vbox"
  That way the plugin can move existing files once you decide to move the VirtualBox symbolic link from original location "/boot/custom/vbox" to your new desired location.
### 0.4.2
- Fixed: Icon file couldn't be saved because plugin folder doesn't exist on first run
### 0.4.1
- Fixed: Icon file deleted when upgrading plugin without restarting server
### 0.4
- Workaround for downloading non exiting icon file
### 0.3
- Fixed startup sequence - Virtualbox can only be started (specifically VMs) after array mounted
### 0.2.7
- Changed WEBUI layout, Corrected few functions
### 0.2.6
- Corrected access to previous session VM list (vms_session.cfg)
### 0.2.5
- Corrected boot and plugin update functions
### 0.2.4
- Fix install function during boot when online version doesn't exist or is not checked
### 0.2.3
- Fix install function
### 0.2.2
- Initial Release
</CHANGES>

<!--
############################################
# Plugin Install script
############################################
-->
<FILE Name="/tmp/&name;-install" Run="/bin/bash">
<INLINE>
<!--
#################
# L O G I T
#################
-->
logit()
{
  <!--logger -trc.&name; -plocal7.info -is "$1"-->
  echo "$1"
}

DOWNLOAD_PKG="false"
INSTALL_PKG="false"

logit "Installing plugin..."

<!--
logit "Cleaning up older versions if exist in &emhttpLOC;"
[ -d "&emhttpLOC;" ] &amp;&amp; rm -fR "&emhttpLOC;"
-->

<!--# Create plugin folder if needed -->
if [ ! -d "&pluginLOC;" ] ; then
  logit "Creating plugin folder &pluginLOC;"
  mkdir -p "&pluginLOC;"
else
  logit "Plugin folder &pluginLOC; already exists"
fi

<!--# Check local package file -->
logit "Checking existing package &pluginLOC;/&packagefile;..."
if [ -f "&pluginLOC;/&packagefile;" ] ; then
  VBOX_PKG_LOCAL_MD5=$(/usr/bin/md5sum &pluginLOC;/&packagefile; | cut -d' ' -f1)
  if [ "$VBOX_PKG_LOCAL_MD5" == "&packageMD5;" ] ; then
    logit "Latest package already exists &pluginLOC;/&packagefile;"
    INSTALL_PKG="true"
  else
    logit "Local/Online package MD5 mismatch ($VBOX_PKG_LOCAL_MD5/&packageMD5;) on &pluginLOC;/&packagefile; - deleting local package"
    DOWNLOAD_PKG="true"
  fi
else
  logit "Latest package does not exist &pluginLOC;/&packagefile;"
  DOWNLOAD_PKG="true"
fi

<!--# Download plugin files -->
if [ "$DOWNLOAD_PKG" == "true" ]; then

  <!--# Save existing packages until new package is downloaded OK -->
  logit "Saving any previous packages from &pluginLOC;"
  mkdir -p "/tmp/&name;-packages"
  TEMP="&pluginLOC;/&name;-package-*"
  mv -f $TEMP "/tmp/&name;-packages"

  logit "Attempting to download plugin package &packageURL;..."
  wget --quiet --spider --no-check-certificate --timeout=10 &packageURL;
  if [ ! $? == "0" ] ; then
    logit "Package server down &packageURL; - Plugin cannot install"
    INSTALL_PKG="false"
  else
    wget --quiet --no-check-certificate --timeout=10 -O &pluginLOC;/&packagefile; &packageURL;
    if [ ! -f "&pluginLOC;/&packagefile;" ] ; then
      logit "Package download failed &packageURL; - Plugin cannot install"
      INSTALL_PKG="false"
    else
      VBOX_PKG_LOCAL_MD5=$(/usr/bin/md5sum &pluginLOC;/&packagefile; | cut -d' ' -f1)
      if [ "$VBOX_PKG_LOCAL_MD5" != "&packageMD5;" ] ; then
        logit "Package MD5 mismatch ($VBOX_PKG_LOCAL_MD5/&packageMD5;) on &pluginLOC;/&packagefile; - Plugin cannot install"
        INSTALL_PKG="false"
      else
        logit "Package &packagefile; downloaded to &pluginLOC; - MD5 match "$VBOX_PKG_LOCAL_MD5""
        INSTALL_PKG="true"
      fi
    fi
  fi
fi

if [ "$INSTALL_PKG" == "true" ] ; then
  logit "Extracting plugin package..."
  <!--# Install plugin files -->
  mkdir -p "/tmp/&name;-extract"
  tar -xf "&pluginLOC;/&packagefile;" -C "/tmp/&name;-extract"
  if [ ! -d "&emhttpLOC;" ] ; then
    mkdir -p "&emhttpLOC;/event"
  fi
  cp -f "/tmp/&name;-extract/disks_mounted" "&emhttpLOC;/event/disks_mounted"
  cp -f "/tmp/&name;-extract/rc.&name;" "/etc/rc.d/rc.&name;"
  chmod 0770 "/etc/rc.d/rc.&name;"
  cp -f "/tmp/&name;-extract/README.md" "&emhttpLOC;/README.md"
  cp -f "/tmp/&name;-extract/unmounting_disks" "&emhttpLOC;/event/unmounting_disks"
  cp -f "/tmp/&name;-extract/&name;.png" "&emhttpLOC;/&name;.png"
  cp -f "/tmp/&name;-extract/&name;_main.php" "&emhttpLOC;/&name;_main.php"
  cp -f "/tmp/&name;-extract/&name;_submit.php" "&emhttpLOC;/&name;_submit.php"
  <!--# Edit PAGE file depending on unRAID OS type 32/64 bit -->
  UNRAID_OS_BITS=$(getconf LONG_BIT)
  if [ "$UNRAID_OS_BITS" == "64" ] ; then
    echo "---" &gt;&gt; "/tmp/&name;-extract/&name;.page"
  fi
  echo "&lt;?php include '/usr/local/emhttp/plugins/&name;/&name;_main.php';?&gt;" &gt;&gt; "/tmp/&name;-extract/&name;.page"
  cp -f "/tmp/&name;-extract/&name;.page" "&emhttpLOC;/&name;.page"

  rm -Rf "/tmp/&name;-extract"
  rm -f "/tmp/&name;-install"

  <!--# Create or fix configuration file -->
  if [ ! -f "&pluginLOC;/&name;.cfg" ] ; then
    logit "Configuration file not found. Creating configuration file..."
    echo "# VirtualBox plugin configuration - Do not modify manually - Change via WEBUI" &gt; "&pluginLOC;/&name;.cfg"
  fi
  logit "Checking all configuration file parameters exist"
  [ ! `cat "&pluginLOC;/&name;.cfg" | grep INSTALL_ON_BOOT` ] &amp;&amp; echo "INSTALL_ON_BOOT=\"false\"" &gt;&gt; "&pluginLOC;/&name;.cfg"
  [ ! `cat "&pluginLOC;/&name;.cfg" | grep UPGRADE_ON_BOOT` ] &amp;&amp; echo "UPGRADE_ON_BOOT=\"false\"" &gt;&gt; "&pluginLOC;/&name;.cfg"
  [ ! `cat "&pluginLOC;/&name;.cfg" | grep UPGRADE_PLG_ON_BOOT` ] &amp;&amp; echo "UPGRADE_PLG_ON_BOOT=\"false\"" &gt;&gt; "&pluginLOC;/&name;.cfg"
  [ ! `cat "&pluginLOC;/&name;.cfg" | grep START_ON_ARRAY_MOUNT` ] &amp;&amp; echo "START_ON_ARRAY_MOUNT=\"false\"" &gt;&gt; "&pluginLOC;/&name;.cfg"
  [ ! `cat "&pluginLOC;/&name;.cfg" | grep START_VMS_ON_START` ] &amp;&amp; echo "START_VMS_ON_START=\"previous\"" &gt;&gt; "&pluginLOC;/&name;.cfg"
  [ ! `cat "&pluginLOC;/&name;.cfg" | grep VBOX_SYMLINK_LOCATION` ] &amp;&amp; echo "VBOX_SYMLINK_LOCATION=\"/boot/custom/vbox\"" &gt;&gt; "&pluginLOC;/&name;.cfg"
  [ ! `cat "&pluginLOC;/&name;.cfg" | grep VBOXWEBSRV_HOST_IP` ] &amp;&amp; echo "VBOXWEBSRV_HOST_IP=\"127.0.0.1\"" &gt;&gt; "&pluginLOC;/&name;.cfg"
  [ ! `cat "&pluginLOC;/&name;.cfg" | grep VBOXWEBSRV_HOST_PORT` ] &amp;&amp; echo "VBOXWEBSRV_HOST_PORT=\"18083\"" &gt;&gt; "&pluginLOC;/&name;.cfg"
  [ ! `cat "&pluginLOC;/&name;.cfg" | grep VBOXWEBSRV_LOGFILE` ] &amp;&amp; echo "VBOXWEBSRV_LOGFILE=\"/boot/config/plugins/virtualbox/vboxwebsrv.log\"" &gt;&gt; "&pluginLOC;/&name;.cfg"
  [ ! `cat "&pluginLOC;/&name;.cfg" | grep VBOXWEBSRV_VERBOSE` ] &amp;&amp; echo "VBOXWEBSRV_VERBOSE=\"true\"" &gt;&gt; "&pluginLOC;/&name;.cfg"
  [ ! `cat "&pluginLOC;/&name;.cfg" | grep VBOXWEBSRV_LOGROTATE` ] &amp;&amp; echo "VBOXWEBSRV_LOGROTATE=\"0\"" &gt;&gt; "&pluginLOC;/&name;.cfg"
  [ ! `cat "&pluginLOC;/&name;.cfg" | grep VBOXWEBSRV_LOGSIZE` ] &amp;&amp; echo "VBOXWEBSRV_LOGSIZE=\"50000\"" &gt;&gt; "&pluginLOC;/&name;.cfg"
  [ ! `cat "&pluginLOC;/&name;.cfg" | grep VBOXWEBSRV_LOGINTERVAL` ] &amp;&amp; echo "VBOXWEBSRV_LOGINTERVAL=\"604800\"" &gt;&gt; "&pluginLOC;/&name;.cfg"

  rm -Rf "/tmp/&name;-packages"
  logit "Plugin and Package file &packagefile; extracted and installed successfully"
  exit 0
else
  <!-- Revert back to previous packages -->
  if [ -f "&pluginLOC;/&packagefile;" ] ; then
    <!-- Remove bad MD5 downloaded package if exists -->
    rm -f "&pluginLOC;/&packagefile;"
  fi
  logit "Reverting back to previously saved packages"
  TEMP1="/tmp/&name;-packages/&name;-package-*"
  TEMP2=$(ls $TEMP1)
  if [ "$TEMP2" != "" ] ; then
    TEMP="/tmp/&name;-packages/&name;-package-*"
    mv -f $TEMP "&pluginLOC;"
  fi
  rm -Rf "/tmp/&name;-packages"
  rm -f "/tmp/&name;-install"
  exit 1
fi
</INLINE>
</FILE>

<!--
############################################
# plugin Remove method
############################################
-->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
logit()
{
  <!--logger -trc.&name; -plocal7.info -is "$1"-->
  echo "$1"
}

logit "Removing plugin..."
[ -f "/tmp/&name;-install" ] &amp;&amp; rm -f "/tmp/&name;-install"
[ -f "/etc/rc.d/rc.&name;" ] &amp;&amp; "/etc/rc.d/rc.&name;" stop
[ -f "/etc/rc.d/rc.&name;" ] &amp;&amp; rm -f "/etc/rc.d/rc.&name;"
[ -d "&emhttpLOC;" ] &amp;&amp; rm -fR "&emhttpLOC;"
[ -f "&pluginLOC;/*.tar.gz" ] &amp;&amp; rm -f "&pluginLOC;/*.tar.gz"
logit "Plugin stopped and removed - no files removed from &pluginLOC;"
</INLINE>
</FILE>
</PLUGIN>
